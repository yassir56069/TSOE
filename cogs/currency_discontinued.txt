# Discontinued currency commands that don't really work as intended, removed/reworked into their current versions..
# Do not run this (unless you're a sadist, or like poor code)! Exists entirely for reference

@ commands.command(name="TESTEP", aliases=['testerep'])
@ commands.has_role('Owner')
async def EPCHECK(self, ctx):
    sndid = ctx.author.id
    users = retrieve_cache(self)
    sndep = users[str(sndid)]['amount']
    await ctx.send(sndep)

@ commands.command(name="ROLEUSER", aliases=['rolecheck'])
@ commands.has_role('Owner')
async def ROLETEST(self, ctx, *, roles):
    print(roles)
    sndid = ctx.author.id
    print(sndid)

@ commands.command(name="ADDROLE", aliases=['radd'])
@ commands.has_role('Owner')
async def radd(self, ctx, rolename, roleid):
    await assn_role(rolename, roleid)

# del command (no name = del last 2 message)
@ commands.command(name="Delete_cmd2", aliases=['del2'])
@ commands.cooldown(20, 5, commands.BucketType.guild)
async def clear2(self, ctx, *, rcv: discord.Member = None):
    await fast_retrieve(self, ctx.author.id)
    self.run = False
    channel = ctx.channel
    sndid = ctx.author.id

    if rcv != None:
        await fast_retrieve(self, rcv.id)
        rcvid = rcv.id
    else:
        async for item in channel.history(limit=15, oldest_first=False):
            if item.author != ctx.author:
                rcvN = item.author
                rcvid = rcvN.id
                break

    (sndep, newep, cost) = cost_calc(self, ctx, rcv, rcvid, sndid, 0.1)
    users = retrieve_cache(self)

    if sndep >= cost:
        trn_embed, trn_run = await transaction_embed(self, ctx, rcv, int(self.roles['SERVERID'][0]), '𝘿𝙀𝙇 𝙏𝙍𝘼𝙉𝙎𝘼𝘾𝙏𝙄𝙊𝙉', ("Transaction: **__-" + str(cost) + "EP__**, Balance: **__" + str(newep) + "EP__**"))            
    else:
        await ctx.send('```TRANSACTION FAILED: INSUFFICIENT FUNDS```', delete_after=3)

    if trn_run == True:
        if rcv == None:
            #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^RCV ISN'T GIVEN^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#

            ############################# USER CAN AFFORD THE TRANSACTION WITH REMAINING EP #############################
            if sndep >= cost:
                users[str(sndid)]['amount'] = newep
                async for item in channel.history(limit=30, oldest_first=False):
                    if item.author != ctx.author:  # MAKES SURE THE AUTHOR OBTAINED IS NOT THE COMMAND AUTHOR
                        await item.delete()  # DELETES THE MESSAGE
                        break
            #___________________________________________________________________________________________________________#
            ############################# USER CAN AFFORD THE TRANSACTION WITH NO REMAINING EP ##########################
            elif sndep == cost:
                users[str(sndid)]['amount'] = 0
                async for item in channel.history(limit=30, oldest_first=False):
                    if item.author != ctx.author:  # MAKES SURE THE AUTHOR OBTAINED IS NOT THE COMMAND AUTHOR
                        await item.delete()  # DELETES THE MESSAGE
                        break
                userid = sndid
                await role_add(self, int(self.roles['SERVERID'][0]), int(self.roles['Ban'][0]), userid, -1)
            #___________________________________________________________________________________________________________#

            #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^RCV IS GIVEN^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#

            ############################# USER CAN AFFORD THE TRANSACTION WITH REMAINING EP #############################
        else:
            if sndep >= cost:
                users[str(sndid)]['amount'] = newep
                async for item in channel.history(limit=100, oldest_first=False):
                    if item.author == rcv:
                        await item.delete()
                        break

            elif sndep == cost:
                users[str(sndid)]['amount'] = 0
                async for item in channel.history(limit=100, oldest_first=False):
                    if item.author == rcv:
                        await item.delete()
                        break
                userid = sndid
                await role_add(self, int(self.roles['SERVERID'][0]), int(self.roles['Ban'][0]), userid, -1)
    else:
        await ctx.message.delete()

    # PEAKTIME RANDOMISER
    @tasks.loop(seconds=10)
    async def Peaktime_RNG(self):
        # Initiate: Peaktime state and Roles.json
        self.Peakrun = False
        guild = self.bot.get_guild(int(self.roles['SERVERID'][0]))
        channel = guild.get_channel(int(self.roles['!channel_general'][0]))
        role = guild.get_role(int(self.roles['PEAKTIME'][0]))
        bot_user = guild.get_member(int(self.roles['BOT_USER_ID'][0]))

        # Cooldown time before next peaktime
        if int(self.peak['cooldown'][0]) == 0:
            self.peak['duration'][0] = 0
            self.peak_cooldown = random.randint(1,3)  # randomise cooldown duration
            print('Next Peak In: ' + str(self.peak_cooldown) + " Minutes")
            self.peak['cooldown'][0] = time.time(
            ) + self.peak_cooldown 

            self.peak_cooldown = datetime.fromtimestamp(
                int(self.peak['cooldown'][0]))

        if self.peak['duration'][0] == 0:  # start peak
            if datetime.now() < self.peak_cooldown:
                # sleep until peaktime
                #print('peaktime sleep..')
                pass
            else:
                # Peaktime run
                self.peak_duration = random.randint(
                    self.peak_rnd[0], self.peak_rnd[1])
                self.peak['duration'][0] = time.time(
                ) + self.peak_duration * self.peak_time
                self.Peakrun = True
                await bot_user.add_roles(role)
                Peak_embed = await Peak_fnc(self, self.peak_duration)
                self.embed_run = await channel.send(embed=Peak_embed)

                # sleep until peaktime ends
                self.peak_duration = datetime.fromtimestamp(
                    int(self.peak['duration'][0]))

        if self.peak['duration'][0] != 0:  # end peak
            if datetime.now() < self.peak_duration:
                #print('peaktime sleep..(DURATION)')
                pass
            else:
                await bot_user.remove_roles(role)
                self.peak['duration'][0] = 0
                self.peak['cooldown'][0] = 0
                # Sending embed for peaktime ended and removing the role off the bot
                if self.Peakrun == True:
                    await self.embed_run.delete()

                Peak_end_embed = await Peak_fnc(self, self.peak_duration, exit_embed='yes')
                embed_end = await channel.send(embed=Peak_end_embed)
                await embed_end.delete(delay=5)


# json read and write functions


def json_read():
    with open(cogs_data+"users.json", 'r') as f:
        users = json.load(f)
    return users


def json_write(users):
    with open(cogs_data+"users.json", 'w') as f:
        json.dump(users, f)


def rjson_read():
    with open(cogs_data+'roles.json', 'r') as f:
        roles = json.load(f)
    return roles


# If no users.json exists, make one
if path.exists(cogs_data+"users.json") == False:
    with open(cogs_data+'users.json', 'w') as userjson:
        json.dump({
        }, userjson)
    print("[INFO] users.json generated!")
else:
    pass

# If no roles.json exists, make one
if path.exists(cogs_data+"roles.json") == False:
    with open(cogs_data+'roles.json', 'w') as rolejson:
        json.dump({
        }, rolejson)
    print("[INFO] roles.json generated!")
else:
    pass